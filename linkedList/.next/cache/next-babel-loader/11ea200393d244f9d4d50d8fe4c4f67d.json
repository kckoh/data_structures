{"ast":null,"code":"class LinkedList {\n  constructor(node) {\n    this.value = node;\n    this.next = null;\n  }\n\n  addNode(node) {\n    //recursive way to addNode\n    if (this.next != null) {\n      this.next.addNode(node);\n    } else {\n      this.next = new LinkedList(node);\n    }\n  }\n\n  deleteNode(head, target) {\n    var headCopy = head;\n\n    if (headCopy.value == target) {\n      headCopy.next;\n    }\n\n    while (headCopy.next != null) {\n      if (headCopy.value == target) {}\n    }\n  }\n\n  transverse() {\n    var array = [];\n    array.push(this.value);\n    var copyNext = this.next;\n\n    while (copyNext != null) {\n      array.push(copyNext.value);\n      copyNext = copyNext.next;\n    }\n\n    console.log(array);\n  }\n\n}\n\nexport default LinkedList;","map":{"version":3,"sources":["/workspace/data_structures/linkedList/components/linkedList.js"],"names":["LinkedList","constructor","node","value","next","addNode","deleteNode","head","target","headCopy","transverse","array","push","copyNext","console","log"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,IAAL,GAAY,IAAZ;AACD;;AAEDC,EAAAA,OAAO,CAACH,IAAD,EAAM;AACT;AACF,QAAG,KAAKE,IAAL,IAAY,IAAf,EAAoB;AAChB,WAAKA,IAAL,CAAUC,OAAV,CAAkBH,IAAlB;AACH,KAFD,MAGI;AACA,WAAKE,IAAL,GAAY,IAAIJ,UAAJ,CAAeE,IAAf,CAAZ;AACH;AAEF;;AAEDI,EAAAA,UAAU,CAACC,IAAD,EAAMC,MAAN,EAAa;AACrB,QAAIC,QAAQ,GAAGF,IAAf;;AACA,QAAIE,QAAQ,CAACN,KAAT,IAAkBK,MAAtB,EAA6B;AACxBC,MAAAA,QAAQ,CAACL,IAAT;AACJ;;AACD,WAAMK,QAAQ,CAACL,IAAT,IAAiB,IAAvB,EAA4B;AACxB,UAAGK,QAAQ,CAACN,KAAT,IAAkBK,MAArB,EAA4B,CAE3B;AACJ;AAEF;;AACDE,EAAAA,UAAU,GAAE;AACV,QAAIC,KAAK,GAAE,EAAX;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKT,KAAhB;AACA,QAAIU,QAAQ,GAAG,KAAKT,IAApB;;AACA,WAAMS,QAAQ,IAAG,IAAjB,EAAsB;AAClBF,MAAAA,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACV,KAApB;AACAU,MAAAA,QAAQ,GAAGA,QAAQ,CAACT,IAApB;AACH;;AACDU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;;AAtCc;;AAyCjB,eAAeX,UAAf","sourcesContent":["class LinkedList {\n  constructor(node) {\n    this.value = node\n    this.next = null\n  }\n\n  addNode(node){\n      //recursive way to addNode\n    if(this.next !=null){\n        this.next.addNode(node)\n    }\n    else{\n        this.next = new LinkedList(node)\n    }\n    \n  }\n\n  deleteNode(head,target){\n    var headCopy = head\n    if (headCopy.value == target){\n         headCopy.next\n    }\n    while(headCopy.next != null){\n        if(headCopy.value == target){\n\n        }\n    }\n\n  }\n  transverse(){\n    var array =[]\n    array.push(this.value)\n    var copyNext = this.next\n    while(copyNext !=null){\n        array.push(copyNext.value)\n        copyNext = copyNext.next\n    }\n    console.log(array)\n  }\n}\n\nexport default LinkedList;"]},"metadata":{},"sourceType":"module"}